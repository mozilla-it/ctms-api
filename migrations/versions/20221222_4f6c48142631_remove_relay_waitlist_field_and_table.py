"""Remove relay_waitlist field and table

Revision ID: 4f6c48142631
Revises: e446b56f38e1
Create Date: 2022-12-22 15:14:55.078988

"""
# pylint: disable=no-member invalid-name
# no-member is triggered by alembic.op, which has dynamically added functions
# invalid-name is triggered by migration file names with a date prefix
# invalid-name is triggered by top-level alembic constants like revision instead of REVISION

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "4f6c48142631"  # pragma: allowlist secret
down_revision = "e446b56f38e1"  # pragma: allowlist secret
branch_labels = None
depends_on = None


def upgrade():
    # Migrate the Relay data to the `waitlist` table.
    """
    INSERT INTO waitlists(email_id, name, fields, create_timestamp, update_timestamp)
    SELECT nl.email_id, REPLACE(nl.name, '-waitlist', ''), json_build_object('geo', geo), rw.create_timestamp, rw.update_timestamp
    FROM relay_waitlist as rw
        INNER JOIN newsletters AS nl ON rw.email_id = nl.email_id
    WHERE nl.name LIKE 'relay%';
    """
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("relay_waitlist")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "relay_waitlist",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("email_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("geo", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "create_timestamp",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "update_timestamp",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["email_id"], ["emails.email_id"], name="relay_waitlist_email_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="relay_waitlist_pkey"),
        sa.UniqueConstraint("email_id", name="relay_waitlist_email_id_key"),
    )
    # ### end Alembic commands ###

    # Migrate the `waitlists` data back into the `relay_waitlist` table.
    op.execute(
        """
    INSERT INTO relay_waitlist(email_id, geo, create_timestamp, update_timestamp)
    SELECT email_id, fields->>'geo', create_timestamp, update_timestamp
    FROM waitlists
    WHERE name LIKE 'relay%'
    ON CONFLICT (email_id) DO UPDATE SET geo = EXCLUDED.geo
    """
    )

"""Add uniqueness to index

Revision ID: fd04e56b249e
Revises: 3689b813fe22
Create Date: 2024-10-08 12:30:13.902342

"""
# pylint: disable=no-member invalid-name
# no-member is triggered by alembic.op, which has dynamically added functions
# invalid-name is triggered by migration file names with a date prefix
# invalid-name is triggered by top-level alembic constants like revision instead of REVISION

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "fd04e56b249e"  # pragma: allowlist secret
down_revision = "3689b813fe22"  # pragma: allowlist secret
branch_labels = None
depends_on = None


def upgrade():
    # In STAGE/PROD we have both the indexes `idx_email_primary_email_lower` and
    # `idx_email_primary_unique_email_lower`.
    # The goal of this migration is to align the code base with STAGE/PROD.
    # We only keep `idx_email_primary_unique_email_lower`.
    # This migration will:
    #  - create it if not exist (DEV)
    #  - drop the `idx_email_primary_email_lower` (without uniqueness)
    op.create_index(
        "idx_email_primary_unique_email_lower",
        "emails",
        [sa.text("lower(primary_email)")],
        unique=True,
        if_not_exists=True,
    )
    op.drop_index("idx_email_primary_email_lower", table_name="emails")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_email_primary_unique_email_lower", table_name="emails")
    op.create_index(
        "idx_email_primary_email_lower",
        "emails",
        [sa.text("lower(primary_email::text)")],
        unique=False,
    )
    # ### end Alembic commands ###
